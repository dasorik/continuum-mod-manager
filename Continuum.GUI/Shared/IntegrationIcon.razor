@using Continuum.Common.Utilities;
@using Continuum.Core.Models;

@if (encodedImage != null)
{
    <div id="mod-button-@Integration.IntegrationID" class="mod-icon-parent integration" @onclick="@RouteMainAction">
        <div class="mod-icon integration">
            <img src="@encodedImage" class="vertical-align unselectable" />
        </div>

        <div class="button-title-banner">
            <span class="button-title">@Integration.DisplayName</span>
            <span class="button-author">@Available available / @Installed installed</span>
        </div>
    </div>
}

@code {
    [Parameter] public Continuum.Core.Models.GameIntegration Integration { get; set; }
    [Parameter] public int Installed { get; set; }
    [Parameter] public int Available { get; set; }
    [Parameter] public EventCallback<string> OnClick { get; set; }

    private string encodedImage = null;

    private async Task ReloadAsync()
    {
        encodedImage = await Base64Utility.ConvertFileToBase64Async(Integration.GetRelativePath(Integration.DisplayImage));
    }

    protected async void RouteMainAction()
    {
        await OnClick.InvokeAsync(Integration.IntegrationID);
    }

    protected override void OnParametersSet()
    {
        encodedImage = null;

        base.InvokeAsync(async () =>
        {
            await Task.Delay(1);
            await ReloadAsync();
            StateHasChanged();
        });
    }
}