@using Continuum.Core.Models;
@using Continuum.Common.Utilities;
@using Continuum.GUI.Extensions;
@using Microsoft.AspNetCore.WebUtilities;
@using System.Web;

@implements IDisposable

@inject Continuum.GUI.Services.ModService modService;
@inject Continuum.GUI.Services.DialogService dialogService;
@inject NavigationManager navigationManager;

<div class="top-row navbar">
    <div class="tool-logo" aria-hidden="true"></div>
</div>

<div class="nav flex-column">
    @if (isOnModsPage)
    {
        <div class="px-3 py-2 flex-container nav-header">
            <span>Game</span><hr />
        </div>

        <div class="px-2 py-1">
            <div class="integration-button" @onclick="OpenIntegrations">
                <span class="back-arrow"></span>
                <span class="icon">
                    @if (integrationIcon != null)
                    {
                        <img src="@integrationIcon" class="unselectable" />
                    }
                </span>
                <span class="text">@integration.DisplayName</span>
            </div>
        </div>
    }
</div>

<div class="nav flex-column">
    @if (!isOnModsPage)
    {
        <div class="px-3 py-2 flex-container nav-header">
            <span>Integrations</span><hr />
        </div>

        <div class="nav-item">
            <NavLink class="nav-link unselectable" href="integrations" Match="NavLinkMatch.All">
                <span class="nav-icon all" aria-hidden="true"></span> All Integrations
            </NavLink>
        </div>
    }
</div>

<div class="nav flex-column scrollable-y flex-grow">
    <div>
        @if (isOnModsPage)
        {
            <div class="px-3 py-2 flex-container nav-header">
                <span>Categories</span><hr />
            </div>

            <div class="nav-item">
                <NavLink class="nav-link unselectable" href="@GetRoute(integration, null)" Match="NavLinkMatch.All">
                    <span class="nav-icon all" aria-hidden="true"></span> All
                </NavLink>
            </div>

            foreach (var category in integration.Categories)
            {
                @if (encodedCategoryIcons.ContainsKey(category.Category))
                {
                    <div class="nav-item">
                        <NavLink class="nav-link unselectable" href="@GetRoute(integration, category.Category)" Match="NavLinkMatch.All">
                            <span class="nav-icon" aria-hidden="true">
                                <img src="@encodedCategoryIcons[category.Category]" class="unselectable" />
                            </span> @category.DisplayName
                        </NavLink>
                    </div>
                }
            }
        }

        <div class="px-3 py-2 flex-container nav-header">
            <span>Settings</span><hr />
        </div>
        <div class="nav-item">
            <a class="nav-link unselectable" href="javascript:void(0);" @onclick="(e) => dialogService.ShowOptionsPopup(isOnModsPage ? SettingsTab.Integration : SettingsTab.AllIntegrations)">
                <span class="nav-icon gear" aria-hidden="true"></span> Settings
            </a>
        </div>
        <div class="nav-item">
            <NavLink class="nav-link unselectable" href="Logs" Match="NavLinkMatch.All">
                <span class="nav-icon logs" aria-hidden="true"></span> Logs
            </NavLink>
        </div>
    </div>
</div>

<div class="nav flex-column">
    <span class="version-number">Application Version @System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString()</span>
</div>

@code {
    private GameIntegration integration = null;
    private GameIntegration previousIntegration = null;

    private string integrationIcon = null;
    private Dictionary<string, string> encodedCategoryIcons = new();
    private bool isOnModsPage = false;

    private IDisposable? locationChangedHandler;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        navigationManager.LocationChanged += LocationChanged;
    }

    private async Task ReloadAsync()
    {
        isOnModsPage = navigationManager.Uri.Contains("/mods");

        if (isOnModsPage)
        {
            integration = GetIntergration();

            if (previousIntegration != integration)
            {
                previousIntegration = integration;
                _ = LoadIconsAsync();
            }
        }
        else
        {
            integration = null;
            previousIntegration = null;
        }
    }

    async Task LoadIconsAsync()
    {
        integrationIcon = null;
        encodedCategoryIcons.Clear();

        integrationIcon = await Base64Utility.ConvertFileToBase64Async(integration.GetRelativePath(integration.DisplayIcon));

        foreach (var category in integration.Categories)
        {
            string encodedCategoryIcon = await Base64Utility.ConvertFileToBase64Async(integration.GetRelativePath(category.IconPath));
            encodedCategoryIcons.Add(category.Category, encodedCategoryIcon);
        }

        StateHasChanged();
    }

    void OpenIntegrations()
    {
        navigationManager.NavigateTo("integrations");
    }

    GameIntegration GetIntergration()
    {
        var id = navigationManager.QueryString("integration");
        return modService.AvailableIntegrations.FirstOrDefault(i => i.IntegrationID.Equals(id, StringComparison.InvariantCultureIgnoreCase));
    }

    string GetRoute(GameIntegration integration, string category)
    {
        var queryParams = new Dictionary<string, string>()
        {
            ["integration"] = integration.IntegrationID
        };

        if (category != null)
        {
            return QueryHelpers.AddQueryString($"mods/{category.ToLower()}", queryParams);
        }
        else
        {
            return QueryHelpers.AddQueryString($"mods", queryParams);
        }
    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        base.InvokeAsync(async () =>
        {
            await Task.Delay(1);
            await ReloadAsync();
            StateHasChanged();
        });
    }

    void IDisposable.Dispose()
    {
        navigationManager.LocationChanged -= LocationChanged;
    }
}